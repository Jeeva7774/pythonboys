rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User's focus sessions
      match /focusSessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's chat history
      match /chatHistory/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's skill progress
      match /skillProgress/{progressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's AI requests (for rate limiting)
      match /aiRequests/{requestId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Communities - public read, authenticated write with validation
    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null && validateCommunityData();
      allow update: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         request.auth.uid in resource.data.moderators);
      
      function validateCommunityData() {
        return request.resource.data.keys().hasAll(['name', 'description', 'createdBy']) &&
               request.resource.data.name is string &&
               request.resource.data.description is string &&
               request.resource.data.createdBy == request.auth.uid;
      }
      
      // Community posts
      match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth != null && 
          request.resource.data.authorId == request.auth.uid &&
          validatePostData();
        allow update, delete: if request.auth != null && 
          (resource.data.authorId == request.auth.uid ||
           request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.moderators);
        
        function validatePostData() {
          return request.resource.data.keys().hasAll(['authorId', 'authorName', 'content']) &&
                 request.resource.data.content is string &&
                 request.resource.data.content.size() <= 2000;
        }
        
        // Post comments
        match /comments/{commentId} {
          allow read: if true;
          allow create: if request.auth != null && 
            request.resource.data.authorId == request.auth.uid;
          allow update, delete: if request.auth != null && 
            resource.data.authorId == request.auth.uid;
        }
      }
      
      // Community leaderboard (read-only for users, write-only for functions)
      match /leaderboard/{userId} {
        allow read: if true;
        allow write: if false; // Only Cloud Functions can write
      }
    }

    // Global leaderboards (read-only for users)
    match /leaderboards/{leaderboardId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions can write
    }

    // Skills collection (read-only for users, admin-only write)
    match /skills/{skillId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Games and puzzles (read-only for users, admin-only write)
    match /games/puzzles/{puzzleId} {
      allow read: if true;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User puzzle attempts
    match /users/{userId}/puzzleAttempts/{attemptId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Mentorship requests
    match /mentorshipRequests/{requestId} {
      allow read: if request.auth != null && 
        (resource.data.studentId == request.auth.uid || 
         resource.data.mentorId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.studentId == request.auth.uid;
      allow update: if request.auth != null && 
        (resource.data.studentId == request.auth.uid || 
         resource.data.mentorId == request.auth.uid);
    }

    // Analytics data (user-specific)
    match /analytics/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // App configuration (read-only for users)
    match /config/{configId} {
      allow read: if true;
      allow write: if false; // Admin-only via console
    }
  }
}
